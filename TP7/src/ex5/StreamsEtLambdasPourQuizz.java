package ex5;

import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.stream.*;
import java.util.List;
import java.util.function.Function;
import java.util.function.Supplier;

public class StreamsEtLambdasPourQuizz {

	// Question 1: cree une methode retournant le flux d'entiers correspondant à la suite fibonacci,  
	//Générer des streams avec Stream.generate
	// STream.generate : Returns an infinite sequential unordered stream where each element is generated by the provided Supplier. 
	//This is suitable for generating constant streams, streams of random elements, etc.


	public Stream<Integer> fibonacciStream(){
		int[] fibs = {0, 1};
		Stream<Integer> fibonacci = Stream.generate(() -> {
			int result = fibs[1];
			int fib3 = fibs[0] + fibs[1];
			fibs[0] = fibs[1];
			fibs[1] = fib3;
			return result;
		});
		return fibonacci;
	}
	
	
	
	// question 2: En utilisant la méthode limit sur les Streams et votre méthode précédente, écrivez
	//une méthode qui affiche les n premiers entiers de la suite de Fibonacci
	// limit: Renvoie un flux composé des éléments de ce flux, tronqué pour ne pas être plus long que maxSize en longueur.
	public void firstFibonacciNumbers(int x) {
		Stream<Integer> fibo=fibonacciStream();
		fibo.limit(x)
			.forEach(result -> System.out.println(result));
	}
	
	
	// question 2: En utilisant la méthode limit sur les Streams et votre méthode précédente, écrivez
		//une méthode qui  qui affiche les n premiers entiers pairs de la suite de Fibonacci.
	
	public void firstEvenFibonacciNumbers(int x) {
		Stream<Integer> fibo=fibonacciStream();
		fibo
		.filter(i->i%2==0)
		.limit(x)
		.forEach(pairelem -> System.out.println(pairelem));
	}


	// Function
	public List<Integer> mystery(
			List<Etudiant> l, Function<Etudiant, Integer> f) {
		List<Integer> results = new ArrayList<>();
		for(Etudiant s : l) {
			results.add(f.apply(s));
		}
		return results;
	}
	
	
	
	public static void main(String[]args) {
		
		StreamsEtLambdasPourQuizz streams=new StreamsEtLambdasPourQuizz();

		
		
		//Stream<Integer> s = streams.fibonacciStream();
		//		s.forEach(System.out::println); elle affiche un infinite flux d'entiers

		System.out.println("******question 2 partie 1 for n=10*******");
		streams.firstFibonacciNumbers(10);
		
		
		
		
		
		
		System.out.println("******question 2 partie 2 *******");
		streams.firstEvenFibonacciNumbers(10);

	}
}
